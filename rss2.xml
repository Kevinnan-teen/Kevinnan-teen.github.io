<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Nachr</title>
    <link>https://www.nachr.top/</link>
    
    <image>
      <url>https://www.nachr.top/icon.png</url>
      <title>Nachr</title>
      <link>https://www.nachr.top/</link>
    </image>
    
    <atom:link href="https://www.nachr.top/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Sun, 08 May 2022 05:44:40 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>你真的会用vim吗</title>
      <link>https://www.nachr.top/2022/05/04/%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%BC%9A%E7%94%A8vim%E5%90%97/</link>
      <guid>https://www.nachr.top/2022/05/04/%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%BC%9A%E7%94%A8vim%E5%90%97/</guid>
      <pubDate>Wed, 04 May 2022 08:40:15 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;&lt;a href=&quot;https://gist.github.com/Kevinnan-teen/5babaed0c96cf782ebba8a6250a902eb&quot;&gt;我的 vim 配置&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1、前言&quot;&gt;&lt;a href=&quot;#1、前言&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><a href="https://gist.github.com/Kevinnan-teen/5babaed0c96cf782ebba8a6250a902eb">我的 vim 配置</a></p><h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>vim 是什么？是一个编辑器，是一个可以即开即用的编辑器，一个你可以通过配置客制化属于你自己的编辑器。如果你的日常工作主要和 IDE 打交道，你需要一键导入所有配置的功能、你需要一键运行工程、你需要内置的 Debug，那么 vim 不适合你。那 vscode 呢？最近几年爆火的插件式代码编辑器，即便你不安装插件，vscode 本身也提供了最够强大的功能：代码提示、代码高亮、文件搜索、字符搜索、函数跳转、丰富的快捷键 等等。它似乎如此完美，提供给你几乎所有写代码用得到的功能，而且还有丰富的插件扩展供你选择。那么，你还要用 vim 吗？默认安装的 vim 不具有以上功能，需要你通过配置 vimrc 自定义你需要的功能。</p><p>我为什么用 vim？一、简单便捷，在写代码的时候，我可以只开着 terminal，一个 tab 用 vim 编辑代码，另一个 tab 用命令行编译运行。二、脱离鼠标，在你熟悉 vim 的快捷键后，几乎所有的操作（删除单词、删除一行、复制粘贴、撤销重写、多行注释、不同行&#x2F;行内定位、新建&#x2F;删除文件、文件&#x2F;关键字搜索、多窗口编辑代码）都可以只用键盘操作，而且为了保持最高的效率，如果你是 87 键键盘，你完全没必要把手移动到键盘右侧的上下左右、PAGE、HOME、END  区域，vim 用 h、j、k、l 来替代左、下、上、右。三、灵活，vim 中几乎可以自定义一切。color theme 可以随意调整，快捷键可以自己配置，按需添加插件。</p><h2 id="2、vim-开箱即用"><a href="#2、vim-开箱即用" class="headerlink" title="2、vim 开箱即用"></a>2、vim 开箱即用</h2><p>约定优于配置（Convention over configuration）是软件开发中一个重要的规范。当谈到 vim 时，很多人第一反应是它拥有庞大的插件库和诸多好用的插件，但我认为这并不是应该是 vim 受开发者喜爱的真正原因。太多的 vim 新用户沉迷于插件和配置。我看过太多的博客、视频，作者推荐了一个个华而不实的插件，它对真正提高生产力没有什么帮助。那什么可以提高生产力？掌握 vim 的操作符（operaotr）和动作（motion）。深入研究 vim 的语法，可以更好地了解如何在行内移动，快速浏览大型源码、脱离鼠标编程。</p><h3 id="2-1-操作符和动作"><a href="#2-1-操作符和动作" class="headerlink" title="2.1 操作符和动作"></a>2.1 操作符和动作</h3><p>vim 中有两个比较基础的概念：操作符（operator）和动作（motion）。</p><p>操作符是对文本进行删除或修改操作的命令。动作是移动光标的命令。</p><p>vim 常用的操作符：</p><ul><li><code>c</code>：修改（change）</li><li><code>d</code>：删除（delete）</li><li><code>y</code>：复制（yank&#x3D;copy）</li><li><code>p</code>：粘贴（paste）</li><li><code>&gt;</code>：增加缩进</li><li><code>&lt;</code>：减少缩进</li><li><code>gU</code>：单词大写</li><li><code>gu</code>：单词小写</li></ul><p>vim 常用动作：</p><ul><li><code>h</code>、<code>j</code>、<code>k</code>、<code>l</code>：分别指代<code>←</code>、<code>↓</code>、<code>↑</code>、<code>→</code></li><li><code>w</code>：移动到下一个单词的首部（word）。<code>W</code>：字串。</li><li><code>b</code>：移动到上一个单词的首部（back）</li><li><code>0</code>：移动到行首</li><li><code>$</code>：移动到行位</li><li><code>gg</code>：移动到第一行</li><li><code>G</code>：移动到最后一行</li><li><code>f</code>：移动到光标右边的指定字符（如<code>fx</code>会移动到光标右边第一个<code>x</code>字符）。<code>;</code>命令会重复上次执行过的<code>f&#123;char&#125;</code>命令，避免重复输入<code>f&#123;char&#125;</code>命令。同时如果不小心跳过头了，可以用<code>,</code>命令再跳回去。<code>F&#123;char&#125;</code>反向移动到上一个<code>&#123;char&#125;</code>所在之处。<code>t&#123;char&#125;</code>正向移动到下一个<code>&#123;char&#125;</code>所在之处的前一个字符。</li><li><code>/</code>：文件内搜索</li></ul><p>vim 的操作符合动作命令结合形成一种语法：一个操作由操作符后跟一个动作命令组成。比如：</p><ul><li><code>cw</code>：修改当前光标所在的单词，且进入 Insert 模式</li><li><code>dw</code>：删除当前光标所在的单词</li><li><code>yw</code>：复制当前光标所在的单词</li></ul><p>当一个操作符命令被连续调用两次时，会作用于当前行</p><ul><li><code>yy</code>：复制当前行</li><li><code>&gt;&gt;</code>：缩进当前行</li><li><code>dd</code>：删除当前行</li></ul><p>操作符和动作命令都可以搭配数字使用，用于完成多次相同动作。</p><ul><li><code>2yy</code>：复制两行</li><li><code>4&gt;&gt;</code>：缩进四行</li><li><code>d2w</code>：删除两个单词</li><li><code>5j</code>：光标向下移动 5 行</li></ul><p>更多命令：</p><ul><li><code>daw</code>：之前用<code>dw</code>删除单词只能是当前光标位于单词首部才能整个单词，当光标位于单词中间时可以用<code>daw</code>进行删除</li><li><code>f&#123;char1&#125;dt&#123;char2&#125;</code>：跳转到<code>&#123;char1&#125;</code>字符位置，删除<code>&#123;char1&#125;</code>字符到<code>&#123;char2&#125;</code>之间的内容。删除范围：<code>[char1, char2)</code>。</li><li><code>Ctrl-[</code>：与<code>ESC</code>效果相同，返回 NORMAL 模式。</li></ul><p>以上的所有命令都是在普通（NORMAL）模式下的操作，而且操作也远远不止上面提到的这些。推荐阅读<a href="https://book.douban.com/subject/26967597/">《Vim实用技巧》第二版</a>。</p><h3 id="2-2-命令行模式"><a href="#2-2-命令行模式" class="headerlink" title="2.2 命令行模式"></a>2.2 命令行模式</h3><p>在按下<code>:</code>键时，vim 会切换到命令行模式；按下<code>Esc</code>退出命令行模式进入 NORMAL 模式。</p><p>保存退出文件：</p><ul><li><p><code>:q</code>：退出</p></li><li><p><code>:q!</code>：不保存退出</p></li><li><p><code>:w</code>：保存</p></li><li><p><code>:qw</code>：保存退出</p></li><li><p><code>:qa</code>：退出所有文件</p></li></ul><p>打开标签页：</p><ul><li><code>:tabe</code>：新建 vim 标签页</li><li><code>:tabc</code>：关闭标签页</li><li><code>:tabn n</code>：移动标签页</li><li><code>gt</code>：移动到下一个标签页</li><li><code>gT</code>：移动到上一个标签页</li></ul><p>当打开多个标签页时，使用<code>:tabn n</code>在标签页之间切换时很麻烦，可以通过按键映射更改默认按键。将<code>&lt;leader&gt;</code>映射为<code>,</code>；将<code>:tabn 1</code>映射为<code>,1</code>；将<code>:tabn 2</code>映射为<code>,2</code>…；</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let mapleader=&quot;,&quot;</span><br><span class="line">nnoremap &lt;silent&gt;&lt;leader&gt;1 :tabn 1&lt;CR&gt;</span><br><span class="line">nnoremap &lt;silent&gt;&lt;leader&gt;2 :tabn 2&lt;CR&gt;</span><br><span class="line">...</span><br><span class="line">nnoremap &lt;silent&gt;&lt;leader&gt;2 :tabn 9&lt;CR&gt;</span><br></pre></td></tr></table></figure><h2 id="3、vim-插件推荐"><a href="#3、vim-插件推荐" class="headerlink" title="3、vim 插件推荐"></a>3、vim 插件推荐</h2><p>安装 vim 插件有很多工具，比如 Pathogen、Vundle、vim-plug。我使用 vim-plug 管理插件。</p><p>安装 vim-plug </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</span><br></pre></td></tr></table></figure><p> vim 的配置文件<code>~/.vimrc</code>。当你在配置文件中声明插件时，列表应该以 call plug#begin(PLUGIN_DIRECTORY) 开始，并以 plug#end() 结束。例如我们要安装 nerdtree 插件，需要在 ~&#x2F;.vimrc中添加以下内容：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">call plug<span class="params">#</span>begin(&#x27;~/.vim/plugged&#x27;)</span><br><span class="line">Plug &#x27;scrooloose/nerdtree&#x27;</span><br><span class="line">call plug<span class="params">#</span>end()</span><br></pre></td></tr></table></figure><p>重新进入vim，然后运行<code>:PlugInstall</code>，插件会自动安装。</p><p>NERDTree 默认无需配置可直接使用，当然更改按键映射后，使用起来更加得心应手。在 ~&#x2F;.vimrc 中添加如下命令，即可使用 Ctrl + e 快速开启目录树</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map &lt;C-e&gt; :NERDTreeToggle&lt;CR&gt;</span><br></pre></td></tr></table></figure><p>卸载插件：<code>:PlugClean</code></p><p>vim 插件管理中心：<a href="https://vimawesome.com/">VimAwesome</a>。</p><h3 id="3-1-主题配置"><a href="#3-1-主题配置" class="headerlink" title="3.1 主题配置"></a>3.1 主题配置</h3><h3 id="dracula-x2F-vim"><a href="#dracula-x2F-vim" class="headerlink" title="dracula&#x2F;vim"></a><a href="https://github.com/dracula/vim">dracula&#x2F;vim</a></h3><p>vim 黑色主题</p><h3 id="vim-polyglot"><a href="#vim-polyglot" class="headerlink" title="vim-polyglot"></a><a href="https://vimawesome.com/plugin/vim-polyglot">vim-polyglot</a></h3><p>vim 不同语言语法高亮</p><h3 id="vim-airline"><a href="#vim-airline" class="headerlink" title="vim-airline"></a><a href="https://vimawesome.com/plugin/vim-airline-superman">vim-airline</a></h3><p>vim 底部状态栏美化</p><p>插件配置：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">“如果要用其他插件优化标签页显示，去除下面一行</span><br><span class="line">let g:airline<span class="params">#</span>extensions<span class="params">#</span>tabline<span class="params">#</span>enabled = 1</span><br><span class="line">let g:airline<span class="built_in">_</span>theme=&#x27;bubblegum&#x27;</span><br></pre></td></tr></table></figure><h3 id="vim-airline-themes"><a href="#vim-airline-themes" class="headerlink" title="vim-airline-themes"></a><a href="https://vimawesome.com/plugin/vim-airline-themes">vim-airline-themes</a></h3><p>扩展 vim-airline 主题</p><h3 id="tabline-vim"><a href="#tabline-vim" class="headerlink" title="tabline.vim"></a><a href="https://vimawesome.com/plugin/tabline-vim">tabline.vim</a></h3><p>vim 标签页优化（去除文件路径，只显示文件名）</p><p>插件配置：需要去除 vim-airline 的 let g:airline#extensions#tabline#enabled &#x3D; 1 配置才能生效</p><h3 id="3-2-代码补全-x2F-静态检查"><a href="#3-2-代码补全-x2F-静态检查" class="headerlink" title="3.2 代码补全&#x2F;静态检查"></a>3.2 代码补全&#x2F;静态检查</h3><h3 id="coc-nvim"><a href="#coc-nvim" class="headerlink" title="coc.nvim"></a><a href="https://vimawesome.com/plugin/coc-nvim">coc.nvim</a></h3><p>LSP 代码补全</p><p>CocConfig 配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;diagnostic.enable&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;languageserver&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"> <span class="attr">&quot;ccls&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ccls&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;filetypes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;c&quot;</span><span class="punctuation">,</span> <span class="string">&quot;cc&quot;</span><span class="punctuation">,</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span> <span class="string">&quot;c++&quot;</span><span class="punctuation">,</span> <span class="string">&quot;cuda&quot;</span><span class="punctuation">,</span> <span class="string">&quot;objc&quot;</span><span class="punctuation">,</span> <span class="string">&quot;objcpp&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;rootPatterns&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;.ccls-root&quot;</span><span class="punctuation">,</span> <span class="string">&quot;compile_commands.json&quot;</span><span class="punctuation">,</span> <span class="string">&quot;.git/&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;initializationOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">     <span class="attr">&quot;cache&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">       <span class="attr">&quot;directory&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/tmp/ccls-cache&quot;</span></span><br><span class="line">     <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;client&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">       <span class="attr">&quot;snippetSupport&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">     <span class="punctuation">&#125;</span></span><br><span class="line">   <span class="punctuation">&#125;</span></span><br><span class="line"> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>构建大型 CMake 工程是可能会遇到缺少 #include 的虚假错误。可以在 CMake 编译命令后加<code>cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1</code>，在 build 目录下生成<code>compile_commands.json</code>，然后将该文件软链接到工程目录<code>ln -s build/compile_commands.json .</code></p><p>使用 make 构建的项目，可以使用<code>bear make</code>生成<code>compile_commands.json</code>（Bear是一个为clang工具生成编译数据库的工具）</p><p>命令：</p><ul><li><code>gd</code>：函数、文件定义</li><li><code>Ctrl-o</code>：搜索返回</li><li><code>K</code>：显示定义，（<code>K</code>&#x3D;&#x3D;<code>shift-k</code>）</li></ul><h3 id="ale"><a href="#ale" class="headerlink" title="ale"></a><a href="https://vimawesome.com/plugin/ale-be-who-we-are">ale</a></h3><p>语法检查</p><p>插件配置：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;dense-analysis/ale</span><br><span class="line">let g:ale<span class="built_in">_</span>sign<span class="built_in">_</span>column<span class="built_in">_</span>always = 1                    &quot;符号槽始终开启</span><br><span class="line">let g:ale<span class="built_in">_</span>set<span class="built_in">_</span>highlights = 0                        &quot;禁用高亮显示。</span><br><span class="line">let g:ale<span class="built_in">_</span>sign<span class="built_in">_</span>error = &#x27;✘&#x27;                          &quot;错误提示符。</span><br><span class="line">let g:ale<span class="built_in">_</span>sign<span class="built_in">_</span>warning = &#x27;!&#x27;                        &quot;警告提示符。</span><br><span class="line">let g:ale<span class="built_in">_</span>echo<span class="built_in">_</span>msg<span class="built_in">_</span>error<span class="built_in">_</span>str = &#x27;E&#x27;                  &quot;错误提示符。</span><br><span class="line">let g:ale<span class="built_in">_</span>echo<span class="built_in">_</span>msg<span class="built_in">_</span>warning<span class="built_in">_</span>str = &#x27;W&#x27;                &quot;警告提示符。</span><br><span class="line">let g:airline<span class="params">#</span>extensions<span class="params">#</span>ale<span class="params">#</span>enable = 1             &quot;将ale信息在airline中显示</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="3-3-文件操作"><a href="#3-3-文件操作" class="headerlink" title="3.3 文件操作"></a>3.3 文件操作</h3><h3 id="The-NERD-tree"><a href="#The-NERD-tree" class="headerlink" title="The NERD tree"></a><a href="https://vimawesome.com/plugin/nerdtree-red">The NERD tree</a></h3><p>开启左侧目录树</p><p>插件配置：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;修改默认快捷键Ctrl+e</span><br><span class="line">nnoremap &lt;C-e&gt; :NERDTreeToggle&lt;CR&gt;</span><br></pre></td></tr></table></figure><p>命令：</p><ul><li><code>i</code>：水平划分两个窗口分别打开两个文件</li><li><code>s</code>：垂直划分两个窗口</li><li><code>ma</code>：新建文件&#x2F;文件夹</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Kevinnan-teen/CDN/nerdtree.gif"></p><p><a href="https://vimawesome.com/plugin/vim-clap">vim-clap</a></p><p>文件搜索</p><p>命令：</p><ul><li><code>:Clap filer</code>：找到文件，<code>enter</code>打开并覆盖当前文件vim</li><li><code>:Clap files</code>：支持使用<code>Ctrl-T</code>在 new tab 中打开新文件</li><li><code>Ctrl-j</code>、<code>Ctrl-k</code>：下、上选择文件</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Kevinnan-teen/CDN/vim-clap.gif"></p><h3 id="vim-ripgrep"><a href="#vim-ripgrep" class="headerlink" title="vim-ripgrep"></a><a href="https://vimawesome.com/plugin/vim-ripgrep">vim-ripgrep</a></h3><p>多文件关键词搜索</p><p>命令：</p><ul><li><code>:Rg &lt;string|pattern&gt;</code></li><li><code>Ctrl+ww</code>：切换窗口</li></ul><h3 id="3-4-其他插件"><a href="#3-4-其他插件" class="headerlink" title="3.4 其他插件"></a>3.4 其他插件</h3><h3 id="The-NERD-Commenter"><a href="#The-NERD-Commenter" class="headerlink" title="The NERD Commenter"></a><a href="https://vimawesome.com/plugin/the-nerd-commenter">The NERD Commenter</a></h3><p>代码注释</p><p>命令：</p><ul><li><code>,cc</code>：注释当前行</li><li><code>,cu</code>：取消当前行注释</li><li><code>n,cc</code>：多行注释</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Kevinnan-teen/CDN/nerd-commenter.gif"></p><h3 id="Tabular"><a href="#Tabular" class="headerlink" title="Tabular"></a><a href="https://vimawesome.com/plugin/tabular">Tabular</a></h3><p>对齐co</p><p>插件配置：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nmap &lt;Leader&gt;t= :Tabularize /=&lt;CR&gt;</span><br><span class="line">vmap &lt;Leader&gt;t= :Tabularize /=&lt;CR&gt;</span><br><span class="line">nmap &lt;Leader&gt;t: :Tabularize /:<span class="keyword">\zs</span>&lt;CR&gt;</span><br><span class="line">vmap &lt;Leader&gt;t: :Tabularize /:<span class="keyword">\zs</span>&lt;CR&gt;</span><br></pre></td></tr></table></figure><p>命令：</p><ul><li><code>,t=</code>：对齐连续行的所有等号，也可以通过 Ctrl+V 选中行对齐；</li><li><code>,t:</code>：对齐冒号</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Kevinnan-teen/CDN/tabular.gif"></p><h3 id="undotree-vim"><a href="#undotree-vim" class="headerlink" title="undotree.vim"></a><a href="https://vimawesome.com/plugin/undotree-vim">undotree.vim</a></h3><p>可视化撤销历史修改</p><p>命令：</p><ul><li><code>,u</code>：列出历史修改</li></ul><h3 id="vim-system-copy"><a href="#vim-system-copy" class="headerlink" title="vim-system-copy"></a><a href="https://vimawesome.com/plugin/vim-system-copy">vim-system-copy</a></h3><p>系统粘贴板</p><p>命令：</p><ul><li><code>cpiw</code>：复制单词到系统粘贴板</li><li><code>cpi</code>：复制单引号内容到系统粘贴板</li><li><code>cvi</code>：将系统粘贴板内容粘贴到单引号</li><li><code>cP</code>：复制一行到系统粘贴板</li><li><code>cV</code>：从系统粘贴板粘贴一行</li></ul><h3 id="Auto-Pairs"><a href="#Auto-Pairs" class="headerlink" title="Auto Pairs"></a><a href="https://vimawesome.com/plugin/auto-pairs">Auto Pairs</a></h3><p>成对插入或删除括号、引号</p><h3 id="vim-startify"><a href="#vim-startify" class="headerlink" title="vim-startify"></a><a href="https://vimawesome.com/plugin/vim-startify">vim-startify</a></h3><p>终端输入 vim，可以打开历史文件</p>]]></content:encoded>
      
      
      
      
      <comments>https://www.nachr.top/2022/05/04/%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%BC%9A%E7%94%A8vim%E5%90%97/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>hexo 搭建静态页面博客</title>
      <link>https://www.nachr.top/2022/04/30/hexo-%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2%E5%8D%9A%E5%AE%A2/</link>
      <guid>https://www.nachr.top/2022/04/30/hexo-%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2%E5%8D%9A%E5%AE%A2/</guid>
      <pubDate>Sat, 30 Apr 2022 08:39:49 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h3 id=&quot;安装前提&quot;&gt;&lt;a href=&quot;#安装前提&quot; class=&quot;headerlink&quot; title=&quot;安装前提&quot;&gt;&lt;/a&gt;安装前提&lt;/h3&gt;&lt;p&gt;Nodejs、Git&lt;/p&gt;
&lt;h3 id=&quot;全局安装-Hexo&quot;&gt;&lt;a href=&quot;#全局安装-Hexo&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h3 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h3><p>Nodejs、Git</p><h3 id="全局安装-Hexo"><a href="#全局安装-Hexo" class="headerlink" title="全局安装 Hexo"></a>全局安装 Hexo</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install -g hexo-cli</span></span><br></pre></td></tr></table></figure><h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><p>安装 Hexo 完成后，执行以下命令，Hexo 会在指定文件夹中新建所需文件。每个 Gihub 账户只能有一个 username.github.io ，所以生成普通的 Gihub Pages 没必要命名为 username.github.io ，可以命名为 my-blog 、 my-resume 。但如果你要把自己的域名绑定到此 Github Pages 作为你的个人博客主链接，那这个仓库必须要命名为 username.github.io ，否则自定义域名解析不成功。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo init username.github.io</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> username.github.io</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install</span></span><br></pre></td></tr></table></figure><p>新建完成后，目录下会生成一些特定文件，比较重要的有：</p><ul><li>_config.yml：网站配置信息；</li><li>package.json：nodejs 依赖包</li><li>source：存放博客静态资源，_posts 存放博客文章，之后使用 hexo 生成的页面也会存放在 source 目录下。</li><li>themes：主题文件夹，Hexo 会根据主题来生成静态页面。</li></ul><h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><p>我自己的 Hexo 博客使用的主题是<a href="https://github.com/probberechts/hexo-theme-cactus">hexo-theme-cactus</a>，主题配置文档很详细，不再重复，多看 README 即可。</p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>在Gihub新建与项目名称相同的仓库，编辑根目录下配置文件<code>_config.yml</code>，使用 Git 部署，仓库链接建议设置为 SSH，避免频繁输入 username 和 password。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:username/username.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>执行 hexo 命令，部署到 GitHub。Github Pages 的渲染相较 commit 有延迟，第一次提交需要 10 mins，之后 commit  1 min 左右即可重新生成。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo clean<span class="comment"># 清理缓存文件和已经生成的静态文件，建议每次提交之前都执行 clean</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo g<span class="comment"># 生成静态文件</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo d<span class="comment"># 部署到 Github</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo s<span class="comment"># 可在本地查看效果</span></span></span><br></pre></td></tr></table></figure><h3 id="个人域名绑定到-Gihub-Page"><a href="#个人域名绑定到-Gihub-Page" class="headerlink" title="个人域名绑定到 Gihub Page"></a>个人域名绑定到 Gihub Page</h3><p>Gihub Page 设置的自定义域名必须包含<code>www</code>，并且必须强制 HTTPS。否则你可能会遇到以下问题。</p><p><img src="https://cdn.jsdelivr.net/gh/Kevinnan-teen/CDN/image-20220430174252330.png"></p><p>因此，你需要将你申请的个人域名进行解析，<strong>解析主机记录为 www 域名的 CNAME 记录到你的 Github 二级域名</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/Kevinnan-teen/CDN/image-20220430163448356.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Kevinnan-teen/CDN/image-20220430163548492.png" alt="image-20220430163548492"></p>]]></content:encoded>
      
      
      
      <category domain="https://www.nachr.top/tags/dev-tool/">dev-tool</category>
      
      
      <comments>https://www.nachr.top/2022/04/30/hexo-%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2%E5%8D%9A%E5%AE%A2/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
